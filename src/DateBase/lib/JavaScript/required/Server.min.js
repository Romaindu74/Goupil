const { User } = require('./User.js');
const { Loop } = require('./Loop.min.js');

class Client {
    constructor(http, websocket_server, index, websocket, id, user, loop) {
        this.http             = http;
        this.websocket_server = websocket_server;
        this.index            = index;
        this.websocket        = websocket;

        this.id               = id;

        this.User             = user;

        this.loop             = loop;

        this.websocket.on('close', _ => {
            this.index.on_close(this.id);
        });

        this.websocket.onmessage = (_) => {
            this.on_message(_.data);
        }
    }

    on_message(data) {
        if (data.toString()) {
            var msg = data.toString();
        } else {
            this.User.send('error', { type: 1002 });

            return Log.error(`Le client "${this.id}" a envoyÃ© un message avec un type inconnu.`);
        }

        var json = this.User.on_message(msg);

        if (!json) {return}
        if (!json.id) {
            return this.User.send('error', { type: 1003 });
        }

        this.loop.message(json);
    }
}


exports.Index = class {
    constructor (http, websocket) {
        this.http      = http;
        this.websocket = websocket;

        this.loop      = new Loop(this);

        this.Clients   = {};

        this.websocket.server.on('connection', _ => {
            var id = (Math.random() * (2 ** 64)).toFixed(0);
            while (this.Clients[id]) {
                var id = (Math.random() * (2 ** 64)).toFixed(0);
            }

            var user = new User(_, id);

            this.loop.add_Client(id, _, user);

            _.on('error', error => {
                Log.error(`Une erreur est survenue avec le client "${id}", code d'erreur : ${error.code}.`);
            });

            Log.debug(`Un nouveau client c'est connecter son id est "${id}"`);
            this.Clients[id] = new Client(this.http, this.websocket.server, this, _, id, user, this.loop.Client(id));
        });
    }

    on_close(id) {
        Log.debug(`Le client "${id}" vient de ce deconnecter`);

        this.loop.del_Client(id);

        delete this.Clients[id];
    }
}