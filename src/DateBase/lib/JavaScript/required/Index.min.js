const http      = require('http');
const fs        = require('fs');
const ws        = require('ws');
const { Index } = require('./Server.min.js');

var D = {}

D.http = class {
    constructor(options, callback = (req, res) => {}) {
        this.server = http.createServer(options, callback);
    }

    start(port = 80) {
        return new Promise((resolve, rejects) => {
            this.server.on('error', _ => {
                rejects(_);
            });
            this.server.listen(port, _ => {
                resolve(_);
            });
        });
    }
}

D.wss = class {
    constructor(options) {
        this.server = new ws.Server(options);
    }
}

D.main = function(http, websocket) {return new Index(http, websocket)}


exports.D = D;

exports.S = class {
    /**
     * @param {Number} port
     * @param {Json} ops
     */
    constructor (port, ops = {}) {
        if ('number' != typeof port) {
            return Log.critical("Port is invalid:", port);
        } else {
            this.port = port;
        }

        this.ops = ops;

        if ('string' != typeof ops.key && ops.key) {
            var file_key = `${path}/common/Http/key.key`;
            if (fs.existsSync(file_key)) {
                this.ops.key = fs.readFileSync(file_key);
            }
        }

        if ('string' != typeof ops.cert && ops.cert) {
            var file_cert = `${path}/common/Http/certificat.crt`;
            if (fs.existsSync(file_cert)) {
                this.ops.cert = fs.readFileSync(file_cert);
            }
        }

        this.h = new D.http(
            this.ops,
            (req, res) => {
                res.writeHead(200, { 'Content-Type': 'text/plain' });
                res.end('<a href="https://github.com/Romaindu74/Goupil"><h1>Simple DataBase</h1></a><br><h2>Hello World !</h2>');
            }
        )
    }

    /**
     * @param {Number} t 
     */
    Start(t = 1500) {
        this.h.start(this.port).then(_ => {
            Log.info(`The HTTP server started on port ${this.port}.`);
        }).catch(_ => {
            if (_.code === 'EADDRINUSE') {
                Log.error(`Port ${this.port} is already in use. Next attempt in ${Math.floor(t/1000)}s.`);
                setTimeout(_ => { this.Start() }, t);
            }
        });

        this.ws = new D.wss({ server: this.h.server });
        
        D.main(this.h, this.ws);        
    }
}