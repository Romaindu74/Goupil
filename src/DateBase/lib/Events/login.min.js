exports.info = {
    login: {
        version: '0.0.0.1',
        func: (User, Client, Data, Id) => {        
            if (typeof Data.name.trim() === "undefined" || typeof Data.password.trim() === "undefined") {
                return User.send('error', { id: Id, type: 1112 });
            }

            const { exist_db, new_db, open_db } = require('./db.min.js');

            if (!exist_db(`db/users/`)) {
                new_db(`db/users/`, JSON.stringify({"users":{"root":{"password":"root","level":10000000}}}), (2 ** 64));
            }

            let users = JSON.parse(open_db(undefined, `db/users/`, (2 ** 64)));

            if (!users.users[Data.name.trim()]) {
                return User.send('error', { id: Id, type: 1113 });
            }
            if (users.users[Data.name.trim()].password !== Data.password) {
                return User.send('error', { id: Id, type: 1114 });
            }
            
            Client.login = true;
            Client.info  = { name: Data.name.trim() };
            Client.level = users.users[Data.name.trim()].level;
            
            return User.send('login', { id: Id, login_at: Data.name.trim() });
        }
    },
    register: {
        version: '0.0.0.1',
        func: (User, Client, Data, Id) => {
            if (!Client.login) {
                return User.send('error', { id: Id, type: 1201 });
            }

            if (typeof Data.name.trim() === "undefined" || typeof Data.password.trim() === "undefined" || Data.name.trim() === "" || Data.password.trim() === "") {
                return User.send('error', { id: Id, type: 1112 });
            }

            const { exist_db, new_db, open_db, save_db } = require('./db.min.js');

            if (!exist_db(`db/users/`)) {
                new_db(`db/users/`, JSON.stringify({"users":{"root":{"password":"root","level":10000000}}}), (2 ** 64));
            }

            let users = JSON.parse(open_db(undefined, `db/users/`, (2 ** 64)));
        
            if (users.users[Data.name.trim()]) {
                return User.send('error', { id: Id, type: 1115 });
            }

            let level = 1;
            if (typeof Data.level == "number") {
                if (Client.level < Data.level) {
                    return User.send('error', { id: Id, type: 1202 });
                }
                level = Data.level;
            }

            users.users[Data.name.trim()] = {
                password: Data.password,
                level: level
            }
        
            save_db(`db/users/`, JSON.stringify(users), (2 ** 64));

            return User.send('register', { id: Id, register: true });
        }
    },
    logout: {
        version: '0.0.0.1',
        func: (User, Client, Data, Id) => {
            if (!Client.login) {
                return User.send('error', { id: Id, type: 1201 });
            }

            Client.login = undefined;
            Client.info  = undefined;
            Client.level = undefined;
            
            return User.send('logout', { id: Id, logout: true });
        }
    },
    del_account: {
        version: '0.0.0.1',
        func: (User, Client, Data, Id) => {
            if (!Client.login) {
                return User.send('error', { id: Id, type: 1201 });
            }

            if (typeof Data.name.trim() === "undefined" || Data.name.trim() === "") {
                return User.send('error', { id: Id, type: 1112 });
            }

            const { exist_db, new_db, open_db, save_db } = require('./db.min.js');

            if (!exist_db(`db/users/`)) {
                new_db(`db/users/`, JSON.stringify({"users":{"root":{"password":"root","level":10000000}}}), (2 ** 64));
            }

            let users = JSON.parse(open_db(undefined, `db/users/`, (2 ** 64)));

            if (!users.users[Data.name.trim()]) {
                return User.send('error', { id: Id, type: 1113 });
            }

            if (Client.level < users.users[Data.name.trim()].level) {
                return User.send('error', { id: Id, type: 1202 });
            }

            delete users.users[Data.name.trim()];

            save_db(`db/users/`, JSON.stringify(users), (2 ** 64));

            return User.send('del_account', { id: Id, delete: true });
        }
    }
};
